// Code generated by github.com/CherkashinEvgeny/gochain. DO NOT EDIT.
package main

import "context"

type MapChain struct{ root mapChainElem }

func (c *MapChain) Instance() Map {
	return &c.root
}

func (c *MapChain) Register(priority int, f func(Map) Map) {
	elem := &c.root
	for elem.next != nil && elem.priority < priority {
		elem = elem.next
	}
	nextElem := &mapChainElem{
		priority: elem.priority,
		impl:     elem.impl,
		next:     elem.next,
	}
	elem.priority = priority
	elem.impl = f(nextElem)
	elem.next = nextElem
}

type mapChainElem struct {
	priority int
	impl     Map
	next     *mapChainElem
}

func (e *mapChainElem) Delete(arg0 context.Context, arg1 string) error {
	return e.impl.Delete(arg0, arg1)
}

func (e *mapChainElem) Get(arg0 context.Context, arg1 string) ([]byte, error) {
	return e.impl.Get(arg0, arg1)
}

func (e *mapChainElem) Set(arg0 context.Context, arg1 string, arg2 []byte) error {
	return e.impl.Set(arg0, arg1, arg2)
}
