// Code generated by github.com/CherkashinEvgeny/gochain. DO NOT EDIT.
package main

import (
	"context"
	"github.com/CherkashinEvgeny/gochain/chain"
)

type MapChain struct{ root mapChainElem }

func (c *MapChain) Instance() Map {
	return &c.root
}

func (c *MapChain) Register(order chain.Order, f func(Map) Map) {
	elem := &c.root
	for elem.next != nil && elem.order < order {
		elem = elem.next
	}
	nextElem := &mapChainElem{
		order: elem.order,
		impl:  elem.impl,
		next:  elem.next,
	}
	elem.order = order
	elem.impl = f(nextElem)
	elem.next = nextElem
}

type mapChainElem struct {
	order chain.Order
	impl  Map
	next  *mapChainElem
}

func (e *mapChainElem) Delete(arg0 context.Context, arg1 string) error {
	return e.impl.Delete(arg0, arg1)
}

func (e *mapChainElem) Get(arg0 context.Context, arg1 string) ([]byte, error) {
	return e.impl.Get(arg0, arg1)
}

func (e *mapChainElem) Set(arg0 context.Context, arg1 string, arg2 []byte) error {
	return e.impl.Set(arg0, arg1, arg2)
}
